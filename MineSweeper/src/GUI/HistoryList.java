package GUI;

import static GUI.GameAccess.Username;
import Save.BoardHistory;
import Save.BoardInsertValues;
import Save.HistoryTable;
import Save.RefundGame;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

public final class HistoryList extends javax.swing.JFrame {

    private BoardHistory boardHistory;
    private Vector<HistoryTable> vectorTable;
    private int userID;
    private DefaultTableModel tableModel;
    private int Chooced;

    public HistoryList(int userID) {
        this.setVisible(true);
        initComponents();
        tableModel = (DefaultTableModel) tableHistory.getModel();

        this.userID = userID;
        boardHistory = new BoardHistory(this.userID);
        try {
            vectorTable = new Vector(boardHistory.insertToArrList());
            insetToTable();
        } catch (SQLException | NullPointerException ex) {
            this.setVisible(false);
            this.dispose();
            HomeGame game = new HomeGame(Username, this.userID);
            JOptionPane.showMessageDialog(null, ex.getMessage(), null, JOptionPane.ERROR_MESSAGE);
            game.setVisible(true);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), null, JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        PopupMenuTable = new javax.swing.JPopupMenu();
        menuDel = new javax.swing.JMenuItem();
        menuOpen = new javax.swing.JMenuItem();
        titelLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        buttonBack = new javax.swing.JButton();
        buttonExit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableHistory = new javax.swing.JTable();
        jrbMode = new javax.swing.JRadioButton();
        jrbDate = new javax.swing.JRadioButton();
        jrbLevel = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        imageHistory = new javax.swing.JLabel();

        menuDel.setLabel("Delete");
        menuDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuDelActionPerformed(evt);
            }
        });
        PopupMenuTable.add(menuDel);

        menuOpen.setActionCommand("Open");
        menuOpen.setLabel("Open");
        menuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuOpenActionPerformed(evt);
            }
        });
        PopupMenuTable.add(menuOpen);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("History");
        setBounds(new java.awt.Rectangle(0, 0, 720, 480));
        setMaximizedBounds(new java.awt.Rectangle(0, 0, 720, 480));
        setMinimumSize(new java.awt.Dimension(750, 510));
        setPreferredSize(new java.awt.Dimension(720, 480));
        setResizable(false);
        setSize(new java.awt.Dimension(720, 480));
        getContentPane().setLayout(null);

        titelLabel.setFont(new java.awt.Font("Georgia", 2, 24)); // NOI18N
        titelLabel.setForeground(new java.awt.Color(255, 0, 0));
        titelLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titelLabel.setText("Games History");
        getContentPane().add(titelLabel);
        titelLabel.setBounds(280, 50, 200, 30);

        jLabel2.setBackground(new java.awt.Color(51, 0, 51));
        jLabel2.setFont(new java.awt.Font("Ebrima", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 204));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Choose a game saved in the middle!");
        jLabel2.setOpaque(true);
        getContentPane().add(jLabel2);
        jLabel2.setBounds(220, 90, 310, 24);

        buttonBack.setBackground(new java.awt.Color(0, 153, 153));
        buttonBack.setForeground(new java.awt.Color(51, 255, 51));
        buttonBack.setText("Back");
        buttonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBackActionPerformed(evt);
            }
        });
        getContentPane().add(buttonBack);
        buttonBack.setBounds(50, 440, 86, 26);

        buttonExit.setBackground(new java.awt.Color(0, 51, 153));
        buttonExit.setForeground(new java.awt.Color(255, 0, 0));
        buttonExit.setText("Exit");
        buttonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExitActionPerformed(evt);
            }
        });
        getContentPane().add(buttonExit);
        buttonExit.setBounds(630, 440, 94, 26);

        tableHistory.setFont(new java.awt.Font("David", 1, 12)); // NOI18N
        tableHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "UserName", "Date", "Level", "Mode"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableHistory.setAutoscrolls(false);
        tableHistory.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tableHistory.setName("History"); // NOI18N
        tableHistory.setShowGrid(false);
        tableHistory.getTableHeader().setResizingAllowed(false);
        tableHistory.getTableHeader().setReorderingAllowed(false);
        tableHistory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableHistoryMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tableHistoryMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(tableHistory);
        if (tableHistory.getColumnModel().getColumnCount() > 0) {
            tableHistory.getColumnModel().getColumn(0).setPreferredWidth(20);
            tableHistory.getColumnModel().getColumn(2).setPreferredWidth(150);
        }

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(130, 130, 500, 305);

        buttonGroup1.add(jrbMode);
        jrbMode.setFont(new java.awt.Font("Microsoft YaHei UI", 2, 18)); // NOI18N
        jrbMode.setForeground(new java.awt.Color(102, 0, 102));
        jrbMode.setText("Modes");
        jrbMode.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jrbMode.setOpaque(false);
        jrbMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbModeActionPerformed(evt);
            }
        });
        getContentPane().add(jrbMode);
        jrbMode.setBounds(330, 450, 90, 30);

        buttonGroup1.add(jrbDate);
        jrbDate.setFont(new java.awt.Font("Microsoft YaHei", 2, 18)); // NOI18N
        jrbDate.setForeground(new java.awt.Color(51, 51, 51));
        jrbDate.setSelected(true);
        jrbDate.setText("Dates");
        jrbDate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jrbDate.setOpaque(false);
        jrbDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbDateActionPerformed(evt);
            }
        });
        getContentPane().add(jrbDate);
        jrbDate.setBounds(230, 450, 90, 27);

        buttonGroup1.add(jrbLevel);
        jrbLevel.setFont(new java.awt.Font("Microsoft New Tai Lue", 2, 18)); // NOI18N
        jrbLevel.setForeground(new java.awt.Color(0, 204, 51));
        jrbLevel.setText("Levels");
        jrbLevel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jrbLevel.setOpaque(false);
        jrbLevel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbLevelActionPerformed(evt);
            }
        });
        getContentPane().add(jrbLevel);
        jrbLevel.setBounds(450, 450, 80, 30);

        jLabel1.setBackground(new java.awt.Color(255, 255, 51));
        jLabel1.setFont(new java.awt.Font("Microsoft JhengHei", 2, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Sorting by:");
        jLabel1.setOpaque(true);
        getContentPane().add(jLabel1);
        jLabel1.setBounds(320, 430, 120, 20);

        imageHistory.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/newpackage/images/NSHistory.png"))); // NOI18N
        getContentPane().add(imageHistory);
        imageHistory.setBounds(0, 0, 756, 482);

        setSize(new java.awt.Dimension(768, 519));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void tableHistoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableHistoryMouseClicked

    }//GEN-LAST:event_tableHistoryMouseClicked

    private void buttonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExitActionPerformed
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_buttonExitActionPerformed

    private void buttonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBackActionPerformed
        this.setVisible(false);
        this.dispose();
        HomeGame open = new HomeGame(Username, this.userID);
        open.setVisible(true);
        open.pack();

    }//GEN-LAST:event_buttonBackActionPerformed

    private void jrbDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbDateActionPerformed
        if (this.Chooced != 0) {
            try {
                sortingBoard();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage(), null, JOptionPane.ERROR_MESSAGE);
            }
        }
        this.Chooced = 0;
    }//GEN-LAST:event_jrbDateActionPerformed

    private void jrbModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbModeActionPerformed
        if (this.Chooced != 1) {
            try {
                sortingBoard();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage(), null, JOptionPane.ERROR_MESSAGE);
            }
        }
        this.Chooced = 1;
    }//GEN-LAST:event_jrbModeActionPerformed

    private void jrbLevelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbLevelActionPerformed
        if (this.Chooced != 2) {
            try {
                sortingBoard();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage(), null, JOptionPane.ERROR_MESSAGE);
            }
        }
        this.Chooced = 2;
    }//GEN-LAST:event_jrbLevelActionPerformed

    private void tableHistoryMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableHistoryMousePressed
        if (SwingUtilities.isRightMouseButton(evt)) {
            //tableHistory.setComponentPopupMenu(PopupMenuTable);
            PopupMenuTable.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_tableHistoryMousePressed

    private void menuDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuDelActionPerformed
        try {
            int numRow = tableHistory.getSelectedRow();
            BoardInsertValues insertValues = new BoardInsertValues(vectorTable.get(numRow).getId(), vectorTable.get(numRow).getBoardID());
            if (tableModel.getValueAt(numRow, 4).equals("InTheMiddle")) {
                insertValues.deleteSaveIfWinORLast();
            }
            insertValues.deleteProperties();
            vectorTable.remove(numRow);
            this.tableModel.removeRow(numRow);
            numRow = -1;
        } catch (ArrayIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(null, "Select Row!", null, JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_menuDelActionPerformed

    private void menuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuOpenActionPerformed
        int numRow = tableHistory.getSelectedRow();
        if (tableModel.getValueAt(numRow, 4).equals("InTheMiddle")) {
            try {
                this.dispose();
                int levels = retLevels(vectorTable.get(numRow).getLevel());
                //return board with the locations
                RefundGame refundGame = new RefundGame(levels, levels,
                        vectorTable.get(numRow).getBoardID(), vectorTable.get(numRow).getId());
                //insert to graphic 
                Graphic graphicsBoardHistory = new Graphic(refundGame.getInitializedArray(), refundGame.getSumFlagReally(),
                        refundGame.getSumFlagFake(), refundGame.getSumMines(), vectorTable.get(numRow).getId(), vectorTable.get(numRow).getBoardID());
            } catch (SQLException ex) {
                this.setVisible(false);
                this.dispose();
                JOptionPane.showMessageDialog(null, ex.getMessage(), null, JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_menuOpenActionPerformed

    public void alignmentCenter() {
        ((DefaultTableCellRenderer) tableHistory.getTableHeader().getDefaultRenderer()).
                setHorizontalAlignment(JLabel.CENTER);
        DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer();
        cellRenderer.setHorizontalAlignment(JLabel.CENTER);
        for (int i = 0; i < tableHistory.getColumnCount(); i++) {
            tableHistory.getColumnModel().getColumn(i).setCellRenderer(cellRenderer);
        }
    }

    public void sortingBoard() throws SQLException {
        //clear the content of the table.
        tableModel.getDataVector().removeAllElements();
        tableModel.fireTableDataChanged();
        if (jrbDate.isSelected()) {
            vectorTable.sort(HistoryTable.dateComparator);
            insetToTable();
            return;
        } else if (jrbMode.isSelected()) {
            vectorTable.sort(HistoryTable.modeComparator);
            insetToTable();
            return;
        }
        vectorTable.sort(HistoryTable.levelComparator);
        insetToTable();

    }

    public void insetToTable() throws SQLException {
        Object[] ob = new Object[5];
        for (int i = 0; i < vectorTable.size(); i++) {
            ob[0] = vectorTable.get(i).getId();
            ob[1] = vectorTable.get(i).getUserName();
            ob[2] = vectorTable.get(i).getDate();
            ob[3] = vectorTable.get(i).getLevel();
            ob[4] = vectorTable.get(i).getMode();
            tableModel.addRow(ob);
        }
        alignmentCenter();
    }

    private Integer retLevels(String level) {
        if (level.equals("Easy")) {
            return 5;
        }
        if (level.equals("Mormal")) {
            return 10;
        }
        return 20;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPopupMenu PopupMenuTable;
    private javax.swing.JButton buttonBack;
    private javax.swing.JButton buttonExit;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel imageHistory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton jrbDate;
    private javax.swing.JRadioButton jrbLevel;
    private javax.swing.JRadioButton jrbMode;
    private javax.swing.JMenuItem menuDel;
    private javax.swing.JMenuItem menuOpen;
    private javax.swing.JTable tableHistory;
    private javax.swing.JLabel titelLabel;
    // End of variables declaration//GEN-END:variables
}
